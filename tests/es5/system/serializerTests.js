"use strict";
var Serializer = require("../../../").system.Serializer;
var util = require("util");
var assert = require("assert");
var _ = require("lodash");
describe("Serialize", function() {
  it("should serialize circular objects", function() {
    var ser = new Serializer();
    var a = {b: 5};
    a.c = a;
    var c = {
      b: 1,
      a: a,
      m: [1, 2, a]
    };
    c.d = a;
    c.x = c.m;
    var array = [a, c, a, null];
    var a2 = ser.parse(ser.stringify(a));
    var c2 = ser.fromJSON(ser.toJSON(c));
    var array2 = ser.parse(ser.stringify(array));
    assert.equal(a2.b, a.b);
    assert.equal(a2.c, a2);
    assert.equal(c2.b, c.b);
    assert.strictEqual(c2.d, c2.a);
    assert.ok(Array.isArray(c2.m));
    assert.equal(c2.m.length, c.m.length);
    assert.equal(c2.m[0], c.m[0]);
    assert.equal(c2.m[1], c.m[1]);
    assert.strictEqual(c2.m[2], c2.a);
    assert.strictEqual(c2.x, c2.m);
    assert.ok(Array.isArray(array2));
    assert.equal(array2.length, array.length);
    assert.equal(array2[0].b, a.b);
    assert.strictEqual(array2[0].c, array2[0]);
    assert.strictEqual(array2[2], array2[0]);
    assert.strictEqual(array2[3], null);
    var c3 = array2[1];
    assert.equal(c3.m.length, c.m.length);
    assert.equal(c3.m[0], c.m[0]);
    assert.equal(c3.m[1], c.m[1]);
    assert.strictEqual(c3.m[2], c3.a);
    assert.strictEqual(c3.m[2], array2[0]);
    assert.strictEqual(c3.m[2], array2[2]);
  });
  it("should serialize class hieararchies", function() {
    function Animal() {
      this.voice = null;
    }
    Animal.prototype.makeSound = function() {
      if (this.voice) {
        return "I say: " + this.voice + ".";
      }
    };
    function Cat() {
      Animal.call(this);
      this.voice = "meow";
    }
    util.inherits(Cat, Animal);
    function Dog() {
      Animal.call(this);
      this.voice = "bark";
    }
    util.inherits(Dog, Animal);
    function SpaceDog() {
      Dog.call(this);
      this.voice = "42";
    }
    util.inherits(SpaceDog, Dog);
    var cat = new Cat();
    var dog = new Dog();
    var spaceDog = new SpaceDog();
    spaceDog.futureStuff = function() {
      return "I think, therefore I am.";
    };
    assert.equal(cat.makeSound(), "I say: meow.");
    assert.equal(dog.makeSound(), "I say: bark.");
    assert.equal(spaceDog.makeSound(), "I say: 42.");
    assert.equal(spaceDog.futureStuff(), "I think, therefore I am.");
    assert.ok(cat instanceof Animal);
    assert.ok(cat instanceof Cat);
    assert.ok(dog instanceof Animal);
    assert.ok(dog instanceof Dog);
    assert.ok(spaceDog instanceof Animal);
    assert.ok(spaceDog instanceof Dog);
    assert.ok(spaceDog instanceof SpaceDog);
    var ser = new Serializer();
    ser.registerKnownType("Cat", Cat);
    ser.registerKnownType("Dog", Dog);
    ser.registerKnownType("SpaceDog", SpaceDog);
    var data = ser.stringify({
      cat: cat,
      dog: dog,
      spaceDog: spaceDog
    });
    assert.ok(typeof data === "string");
    var deserialized = ser.parse(data);
    assert.equal(deserialized.cat.makeSound(), "I say: meow.");
    assert.equal(deserialized.dog.makeSound(), "I say: bark.");
    assert.equal(deserialized.spaceDog.makeSound(), "I say: 42.");
    assert.equal(deserialized.spaceDog.futureStuff(), "I think, therefore I am.");
    assert.ok(deserialized.cat instanceof Animal);
    assert.ok(deserialized.cat instanceof Cat);
    assert.ok(deserialized.dog instanceof Animal);
    assert.ok(deserialized.dog instanceof Dog);
    assert.ok(deserialized.spaceDog instanceof Animal);
    assert.ok(deserialized.spaceDog instanceof Dog);
    assert.ok(deserialized.spaceDog instanceof SpaceDog);
  });
  it("should support custom serialization", function() {
    var constructed = 0;
    function Foo() {
      this.a = "a";
      this.b = "b";
    }
    function Boo() {
      Foo.call(this);
      this.c = "c";
      constructed++;
    }
    util.inherits(Boo, Foo);
    Boo.prototype.serializeToJSON = function() {
      return {
        a: this.a,
        b: this.b,
        c: this.c
      };
    };
    Boo.prototype.deserializeFromJSON = function(json) {
      this.a = json.a;
      this.b = json.b;
      this.c = json.c;
      this.boo = "boo";
    };
    var ser = new Serializer();
    ser.registerKnownType("Boo", Boo);
    var boo = new Boo();
    assert.equal(constructed, 1);
    assert.equal(boo.a, "a");
    assert.equal(boo.b, "b");
    assert.equal(boo.c, "c");
    assert.strictEqual(boo.boo, undefined);
    var boo2 = ser.fromJSON(ser.toJSON(boo));
    assert.equal(constructed, 1);
    assert.equal(boo2.a, "a");
    assert.equal(boo2.b, "b");
    assert.equal(boo2.c, "c");
    assert.strictEqual(boo2.boo, "boo");
    assert.ok(boo2 instanceof Boo);
    assert.ok(boo2 instanceof Foo);
    var map = new Map();
    var foo = new Foo();
    map.set(foo, boo);
    map.set(boo2, foo);
    ser.registerKnownType("Foo", Foo);
    var mapStr = ser.stringify(map);
    var map2 = ser.parse(mapStr);
    assert.equal(constructed, 1);
    assert.equal(map2.size, 2);
    var fooValue = null;
    var fooKey = null;
    map2.forEach(function(key, value) {
      if (key instanceof Boo) {
        assert.ok(value instanceof Foo && !(value instanceof Boo));
        fooValue = value;
      } else if (key instanceof Foo) {
        assert.ok(value instanceof Boo);
        assert.equal(value.boo, "boo");
        fooKey = key;
      } else {
        assert.fail("This is not possible.");
      }
    });
    assert.strictEqual(fooKey, fooValue);
  });
  it("should support Map", function() {
    var map = new Map();
    map.set("a", "b");
    map.set("c", "d");
    var ser = new Serializer();
    var data = ser.toJSON(map);
    var otherMap = ser.fromJSON(data);
    assert.ok(otherMap instanceof Map);
    assert.equal(otherMap.size, 2);
    assert.equal(otherMap.get("a"), map.get("a"));
    assert.equal(otherMap.get("c"), map.get("c"));
  });
  it("should support Set", function() {
    var set = new Set();
    set.add("a");
    set.add("b");
    set.add("c");
    set.add(["d", {e: "f"}]);
    var ser = new Serializer();
    var data = ser.toJSON(set);
    var otherSet = ser.fromJSON(data);
    assert.ok(otherSet instanceof Set);
    assert.equal(otherSet.size, 4);
    assert(otherSet.has("a"));
    assert(otherSet.has("b"));
    assert(otherSet.has("c"));
    var all = [];
    var $__4 = true;
    var $__5 = false;
    var $__6 = undefined;
    try {
      for (var $__2 = void 0,
          $__1 = (otherSet.values())[$traceurRuntime.toProperty(Symbol.iterator)](); !($__4 = ($__2 = $__1.next()).done); $__4 = true) {
        var item = $__2.value;
        {
          all.push(item);
        }
      }
    } catch ($__7) {
      $__5 = true;
      $__6 = $__7;
    } finally {
      try {
        if (!$__4 && $__1.return != null) {
          $__1.return();
        }
      } finally {
        if ($__5) {
          throw $__6;
        }
      }
    }
    var obj = _(all).filter(function(i) {
      return _.isArray(i);
    }).first();
    assert(_.isArray(obj));
    assert.equal(obj[0], "d");
    assert(_.isObject(obj[1]));
    assert.equal(obj[1].e, "f");
  });
  it("should support Date", function() {
    var obj = {a: new Date()};
    var ser = new Serializer();
    var data = ser.toJSON(obj);
    var otherObj = ser.fromJSON(data);
    assert(_.isPlainObject(otherObj));
    assert(_.isDate(otherObj.a));
    assert.equal(otherObj.a.getTime(), obj.a.getTime());
  });
  it("should support Regex", function() {
    var obj = {a: /abc/g};
    var ser = new Serializer();
    var data = ser.toJSON(obj);
    var otherObj = ser.fromJSON(data);
    assert(_.isPlainObject(otherObj));
    assert(_.isRegExp(otherObj.a));
    assert.equal(otherObj.a.toString(), obj.a.toString());
  });
  it("should serialize functions", function() {
    var f = function() {
      return "Hello!";
    };
    var ser = new Serializer();
    var data = ser.toJSON(f);
    assert(_.isPlainObject(data));
    var otherF = ser.fromJSON(data);
    assert(_.isFunction(otherF));
    assert.equal("Hello!", otherF());
  });
  it("should serialize function properties", function() {
    var f = function() {
      return "Hello!";
    };
    var obj = {f: f};
    var ser = new Serializer();
    var data = ser.toJSON(obj);
    assert(_.isPlainObject(data));
    var otherObj = ser.fromJSON(data);
    assert(_.isFunction(otherObj.f));
    assert.equal("Hello!", otherObj.f());
  });
});
//# sourceMappingURL=data:application/json;base64,
